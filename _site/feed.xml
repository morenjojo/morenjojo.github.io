<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UniFreak | Another yet unique freak is showing a freakshow</title>
    <description>Fanghao&#39;s personal weblog, on coding or such stuff</description>
    <link>https://unifreak.github.io//</link>
    <atom:link href="https://unifreak.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 03 Nov 2015 21:49:11 +0800</pubDate>
    <lastBuildDate>Tue, 03 Nov 2015 21:49:11 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>理解 diff 命令</title>
        <description>&lt;p&gt;&lt;em&gt;原文在 2009/04/17 发表于 &lt;a href=&quot;http://unix.worldiswelcome.com/understanding-the-diff-command-in-unix&quot;&gt;http://unix.worldiswelcome.com/understanding-the-diff-command-in-unix&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unix 系统管理员来经常需要去知道两个文件之间有什么差异. &lt;code&gt;diff&lt;/code&gt; 命令就是干这个的. 我现在就准备讲讲 &lt;code&gt;diff&lt;/code&gt;. 它是一个经常被用到却不是很被了解的命令. 我希望 Unix 使用者在读完这篇文章之后能够正确了解这个命令的用途并从中获益. 另外一个有用的命令是: &lt;a href=&quot;http://unix.worldiswelcome.com/how-to-find-common-lines-between-two-text-files-in-unix&quot;&gt;&lt;code&gt;comm&lt;/code&gt;&lt;/a&gt; 命令. 我们开始吧...&lt;/p&gt;

&lt;p&gt;示例文件分别是 &lt;em&gt;first&lt;/em&gt; 文件和 &lt;em&gt;second&lt;/em&gt; 文件. 如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wiw_labs:$ nl first
1 computer
2 modem
3 monitor
4 phone
5 switch

wiw_labs:$ nl second
1 cable
2 mobile
3 screen
4 modem
5 phone
6 server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;diff&lt;/code&gt; 命令用来比较这两个文件之间的差异&lt;/p&gt;

&lt;h1 id=&quot;diff-命令的用法&quot;&gt;diff 命令的用法&lt;/h1&gt;

&lt;p&gt;我命先从 &lt;code&gt;diff&lt;/code&gt; 的用法说起. &lt;code&gt;diff&lt;/code&gt; 通常这样使用:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;diff first_file second_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这条命令意即: first_file 和 second_file 有什么不同&lt;/p&gt;

&lt;h1 id=&quot;diff-命令如何工作&quot;&gt;diff 命令如何工作&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;diff&lt;/code&gt; 命令的运作原理就是, 想法设法的让 &lt;em&gt;first&lt;/em&gt; 文件和 &lt;em&gt;second&lt;/em&gt; 文件一样. 它希望通过更改(c), 删除(d) &lt;em&gt;first&lt;/em&gt; 文件中的行以使其和 &lt;em&gt;second&lt;/em&gt; 文件一模一样. 如果需要, 它还会把 &lt;em&gt;second&lt;/em&gt; 文件中的行附加到 &lt;em&gt;first&lt;/em&gt; 文件中. 如果你明白我说的什么, 很好, 如果不明白也随便. 当我使用示例给你解释的时候你就会明白的.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;diff&lt;/code&gt; 就是通过下面的这些步骤来生成这两个文件的差异报告的:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;它从 &lt;em&gt;first&lt;/em&gt; 文件和 &lt;em&gt;second&lt;/em&gt; 文件的第 1 行开始. 如果它们不一样, &lt;code&gt;diff&lt;/code&gt; 便顺着 &lt;em&gt;first&lt;/em&gt; 文件往下找, 直到找到和 &lt;em&gt;second&lt;/em&gt; 文件中相似的条目.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果在 &lt;em&gt;first&lt;/em&gt; 文件中没有找到和 &lt;em&gt;second&lt;/em&gt; 文件第 1 行相同的行, 它就再从 &lt;em&gt;second&lt;/em&gt; 文件的第 2 行开始. 它会在 &lt;em&gt;first&lt;/em&gt; 文件中开始找. 然后提议做什么(附加, 更改或删除)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;示例&quot;&gt;示例&lt;/h1&gt;

&lt;p&gt;理论讲得够多了. 我们来点实际例子好解释的更通透一点.
我把这两个文件并排来放, 好理解起来更容易一些. 另外行号也一并显示了出来.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wiw_labs:$ paste first second|nl
1 computer cable
2 modem mobile
3 monitor screen
4 phone modem
5 switch phone
6           server

wiw_labs:$ diff first second
1c1,3
&amp;lt; computer
—
&amp;gt; cable
&amp;gt; mobile
&amp;gt; screen
3d4
&amp;lt; monitor
5c6
&amp;lt; switch
—
&amp;gt; server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在, 看一下上面 &lt;code&gt;paste&lt;/code&gt; 命令带行号的输出. 注意下面几点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;first&lt;/em&gt; 文件的第 2 行(modem) 和 &lt;em&gt;second&lt;/em&gt; 文件的第 4 行(modem) 一致. 所以, 如果我们把 &lt;em&gt;first&lt;/em&gt; 文件中的第 1 行换成 &lt;em&gt;second&lt;/em&gt; 文件中的 1 到 3 行, 这两个文件的第一部分便都一样了. 输出看起来就会是这样的:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wiw_labs:$ paste first second|nl
1 cable cable
2 mobile mobile
3 screen screen
4 modem modem
5 monitor phone
6 phone server
7 switch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;first&lt;/em&gt; 文件的第 4 行(phone) 和 &lt;em&gt;second&lt;/em&gt; 文件的第 5 行一致. 这意味着如果我们删除 &lt;em&gt;first&lt;/em&gt; 文件中的第 3 行(也就是目前的第 4 行), 这两个文件的第二部分便都一样了.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wiw_labs:$ paste first second|nl
1 cable cable
2 mobile mobile
3 screen screen
4 modem modem
5 phone phone
6 switch server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;first&lt;/em&gt; 文件的第 5 行(switch)可用 &lt;em&gt;second&lt;/em&gt; 文件的第 6 行(server)替换. 至此, 这两个文件完全一样了.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wiw_labs:$ paste first second|nl
1 cable cable
2 mobile mobile
3 screen screen
4 modem modem
5 phone phone
6 server server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在, &lt;code&gt;diff&lt;/code&gt; 命令的输出更容易理解了:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1c1,3&lt;/strong&gt;: 更改 &lt;em&gt;first&lt;/em&gt; 文件的第一行为 &lt;em&gt;second&lt;/em&gt; 文件的 1 到 3 行&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3d4&lt;/strong&gt;: 从 &lt;em&gt;first&lt;/em&gt; 文件中删除第 3 行(modem).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5c6&lt;/strong&gt;: 更改 &lt;em&gt;first&lt;/em&gt; 文件中的第 5 行(switch) 为 &lt;em&gt;second&lt;/em&gt; 文件中的第 6 行(server)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在, 反过来再看一下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wiw_labs:$ paste second first | nl
1 cable computer
2 mobile modem
3 screen monitor
4 modem phone
5 phone switch
6 server

wiw_labs:$ diff second first
1,3c1
&amp;lt; cable
&amp;lt; mobile
&amp;lt; screen
—
&amp;gt; computer
4a3
&amp;gt; monitor
6c5
&amp;lt; server
—
&amp;gt; switch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;我们看到 &lt;em&gt;first&lt;/em&gt; 文件的第 4 行(modem) 和 &lt;em&gt;second&lt;/em&gt; 文件的第 2 行一致. 所以如果我们把 &lt;em&gt;first&lt;/em&gt; 文件的 1 到 3 行替换为 &lt;em&gt;second&lt;/em&gt; 文件的第 1 行, 我们得到如下输出:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wiw_labs:$ paste second first | nl
1 computer computer
2 modem modem
3 phone monitor
4 server phone
5 switch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;现在, &lt;em&gt;second&lt;/em&gt; 文件的第 3 行(monitor) 在 &lt;em&gt;first&lt;/em&gt; 文件中并不存在. 所以, 把它附加到 &lt;em&gt;first&lt;/em&gt; 文件的第 4 行(modem)后面. 要记住 &lt;code&gt;diff&lt;/code&gt; 命令的输出中的行号永远指的是原始的行号. 现在, 输出看起来是这样的:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wiw_labs:$ paste second first | nl
1 computer computer
2 modem modem
3 monitor monitor
4 phone phone
5 server switch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;first&lt;/em&gt; 文件的第 6 行(server)需要改成 &lt;em&gt;second&lt;/em&gt; 文件的第 5 行(switch). 更改之后, 两个文件便都一样了:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1 computer computer
2 modem modem
3 monitor monitor
4 phone phone
5 switch switch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在, 更容易理解 &lt;code&gt;diff&lt;/code&gt; 命令的输出了:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1,3c1&lt;/strong&gt;: 把 &lt;em&gt;first&lt;/em&gt; 文件的第 1 到 3 行改为 &lt;em&gt;second&lt;/em&gt; 文件的第 1 行.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4a3&lt;/strong&gt;: 在 &lt;em&gt;first&lt;/em&gt; 文件的第 4 行(modem)后面附加上 &lt;em&gt;second&lt;/em&gt; 文件的第 3 行(monitor).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6c5&lt;/strong&gt;: 把 &lt;em&gt;first&lt;/em&gt; 文件的第 6 行(server)改为 &lt;em&gt;second&lt;/em&gt; 文件的第 5 行(switch).&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 28 Sep 2015 00:00:00 +0800</pubDate>
        <link>https://unifreak.github.io//translation/understanding-the-diff-command-in-unix</link>
        <guid isPermaLink="true">https://unifreak.github.io//translation/understanding-the-diff-command-in-unix</guid>
        
        <category>linux</category>
        
        
        <category>translation</category>
        
      </item>
    
      <item>
        <title>HTTP 头和 PHP header() 函数</title>
        <description>&lt;p&gt;&lt;em&gt;原文链接: &lt;a href=&quot;http://www.nicholassolutions.com/tutorials/php/headers.html&quot;&gt;http://www.nicholassolutions.com/tutorials/php/headers.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;版权: 本文受 Creative Commons License 版权保护, 你可以在 Creative Commons Attribution NonCommercial NoDerives 2.5 License 下分发该文&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;引言&quot;&gt;引言&lt;/h1&gt;

&lt;p&gt;许多初级到中级的的 PHP 程序员把 &lt;a href=&quot;http://www.php.net/manual/function.header.php&quot;&gt;header()&lt;/a&gt; 函数当作某种神秘巫术. 他们可以照着代码示例把功能实现, 但是还是不知道到底它是如果运作的. 我最开始就是这样的.&lt;/p&gt;

&lt;p&gt;实际上它非常简单. 在这篇文章中, 我会解释 HTTP 头(header) 是如何运作的, 它们与 PHP 的关系, 以及它们的 meta 标签 equivalents(对应物)&lt;/p&gt;

&lt;p&gt;希望你读完之后, 能更顺手的使用 header() 函数, 甚至想出一些更多利用它的地方. 我们也会讲到其他一些关于 HTTP 和 PHP 的重要话题. 但是在我们开始讲任何程序相关的东西之前, 我们需要先快速(并且不完整的)过一遍 HTTP (HyperTex Transfer Protocol) 运作原理&lt;/p&gt;

&lt;h1 id=&quot;http-概览&quot;&gt;HTTP 概览&lt;/h1&gt;

&lt;h2 id=&quot;headers-对话中的词语&quot;&gt;Headers: 对话中的词语&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/HyperText_Transfer_Protocol&quot;&gt;HTTP&lt;/a&gt; 是 web 服务器和客户端浏览器之间的数据传输(比如 web 页面中的 HTML, 图片, 文件)协议(&amp;#39;规则&amp;#39;集合), 并且通常使用 80 &lt;a href=&quot;http://en.wikipedia.org/wiki/Port_%28computing%29#Network_port&quot;&gt;端口&lt;/a&gt;. 这就是网站 URL 前面 &amp;#39;&lt;code&gt;http://&lt;/code&gt;&amp;#39; 的来源&lt;/p&gt;

&lt;p&gt;很多人最开始制作 web 页面的时候, 他们先在本地电脑上写 HTML, 在本地浏览器查看是否符合预期, 然后上传到服务器, 就可以在网上浏览这些页面了. 看起来好像在无论在本地查看与在服务器上查看的页面都一样, 传输的数据只有这些 HTML 以及它包含的图片. 但是实际上还有另外一些许多你没看到的信息 - 头信息.&lt;/p&gt;

&lt;p&gt;头信息可以分为两大类: 你浏览器向服务器请求文件时发出的请求头信息, 服务器提供文件给浏览器时发出的响应头信息. 把这些头信息当作浏览器和服务器对话时的词语. 我喜欢把服务器想象为图书管理员, 把浏览器想象成正在请求图书资源的学者. 浏览器走向位于服务台 (80 端口) 的服务器, 说道, &amp;quot;Hi, 我是 Mozilla, 我正在找这个编目号是 &amp;#39;&lt;a href=&quot;http://www.expertsrt.com&quot;&gt;www.expertsrt.com&lt;/a&gt;&amp;#39; 的资源. 你可以帮我找到它吗?&amp;quot; 服务器听到后回应 &amp;quot;是的, 我找到了, 让我把它给你. 这里面是 HTML 文本, 它写的是 &amp;#39;&lt;code&gt;&amp;lt;html&amp;gt;...&lt;/code&gt;&amp;#39;&amp;quot; 浏览器开始从头到尾的读它, 并且遇到了一个图片标签, 所以向服务器要位于 src 属性指定处的图片. 服务器进行查找, 找到这个文件然后说道 &amp;quot;这是个 PNG 图片, 它的数据是...&amp;quot; 你懂的.&lt;/p&gt;

&lt;p id=&quot;secondConv&quot;&gt;另一个对话可能像这样:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;浏览器: Hi, 我是 Mozilla, 能给我在 &amp;#39;&lt;a href=&quot;http://www.expertsrt.com/moved.html&quot;&gt;www.expertsrt.com/moved.html&lt;/a&gt;&amp;#39; 这里的文件吗?.&lt;/p&gt;

&lt;p&gt;服务器: 那个文件已经不在那儿了, 他现在在 &amp;#39;&lt;a href=&quot;http://www.expertsrt.com/newloc.html&quot;&gt;www.expertsrt.com/newloc.html&lt;/a&gt;&amp;#39;.&lt;/p&gt;

&lt;p&gt;浏览器: Hi, 我是 Mozilla, 能给我在 &amp;#39;&lt;a href=&quot;http://www.expertsrt.com/newloc.html&quot;&gt;www.expertsrt.com/newloc.html&lt;/a&gt;&amp;#39; 这里的文件吗?&lt;/p&gt;

&lt;p&gt;服务器: 我找到这个文件了. 查看它 10 秒钟然后再向我问一次. 它是一个 HTML 文本文件, 它有这些内容...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...10 秒钟...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;浏览器: Hi, 我是 Mozilla, 能给我在 &amp;#39;&lt;a href=&quot;http://www.expertsrt.com/newloc.html&quot;&gt;www.expertsrt.com/newloc.html&lt;/a&gt;&amp;#39; 这里的文件吗?&lt;/p&gt;

&lt;p&gt;服务器: 我找到这个文件了. 查看它 10 秒钟然后再向我问一次. 它是一个 HTML 文本文件, 它有这些内容...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...10 秒钟...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;浏览器: Hi, 我是 Mozilla, 能给我在 &amp;#39;&lt;a href=&quot;http://www.expertsrt.com/newloc.html&quot;&gt;www.expertsrt.com/newloc.html&lt;/a&gt;&amp;#39; 这里的文件吗?&lt;/p&gt;

&lt;p&gt;服务器: 我找到这个文件了. 查看它 10 秒钟然后再向我问一次. 它一个 HTML 文本文件, 它有这些内容...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...诸如这般, 直到浏览器被用户重新定向...&lt;/p&gt;

&lt;p&gt;正如你所看到的, 使用头信息可以控制许多事情. 使用 header() 函数, 你可以让服务器发送你所需的头信息, 这样你可以做除了发送 HTML 之外许多很酷的事情.&lt;/p&gt;

&lt;h2 id=&quot;看看整个对话过程&quot;&gt;看看整个对话过程&lt;/h2&gt;

&lt;p&gt;在继续之前, 让我们先不使用浏览器来查看一个 web 页面, 这样我们可以看到整个对话, 更好的了解 HTTP 头的工作. 先打开命令行 (在 windows 中, 点击开始菜单-&amp;gt;运行, 输入 &lt;code&gt;cmd&lt;/code&gt;, 然后点击 &amp;quot;OK&amp;quot;...如果你正使用 linux, 你或许已经知道怎么打开了). 在命令行中输入:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;telnet expertsrt.com 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后回车. 这会链接到 expersrt.com 的 80 端口. 然后, 复制并粘贴下面的文字:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET / HTTP/1.1
Host: expertsrt.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你输入或粘贴这些文字的时候, 命令行除了光标的闪烁没看到任何动静的话, 不要担心 -- 它们确实被发送到服务器了. 第一行说明你使用 GET 请求方法去获取资源 / (这里是目标主机上基目录里的文件), 并且你在使用 HTTP 1.1 版本. 第二行告诉服务器你想要连接到哪台主机. 当你输入 &amp;#39;expertsrt.com&amp;#39; 后, 回车两次 (只需两次). 你应当立刻得到类似下面的响应:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.1 301 Moved Permanently
Date: Wed, 08 Feb 2006 07:44:07 GMT
Server: Apache/2.0.54 (Debian GNU/Linux) mod_auth_pgsql/2.0.2b1 mod_ssl/2.0.54 OpenSSL/0.9.7e
Location: http://www.expertsrt.com/
Content-Length: 233
Content-Type: text/html; charset=iso-8859-1

&amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//IETF//DTD HTML 2.0//EN&amp;quot;&amp;gt;
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;301 Moved Permanently&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Moved Permanently&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;The document has moved &amp;lt;a href=&amp;quot;http://www.expertsrt.com/&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;哎呀! 看起来好像我们请求的文件已经不在那儿了; 它已经被移到新的地方了: &lt;code&gt;http://www.expertsrt.com&lt;/code&gt;. 如果你使用浏览器, 你只会看到 HTML - 在第一个空白行之前的都是头信息. 实际上, 现代浏览器比这更智能 - 当他们看到第三行的新的 URL 时, 会自动转向那里, 这样你就不用手动再输入这个新的 URL 了. 让我们去这个新的 URL. 这时可能你已经断开连接了. 如果这样, 只需按向上键, telnet 命令会出现, 然后回车以重新连接. 如果你没有断开连接, 那直接输入下面的文字就行:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET / HTTP/1.1
Host: www.expertsrt.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后回车两次. 你会看到另一个类似的响应, 告诉你那个页面实际上在 &lt;code&gt;http://www.expertsrt.com/index.php&lt;/code&gt;. 服务器真挑剔是不是? ;-) 重复上面的操作, 不过这次输入&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET /index.php HTTP/1.1
Host: www.expertsrt.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意我们想要的文件名在第一行. 这一次我们屏幕被文字刷满了: 这就是来自 ERT 主页的 HTML. 这里的头信息看起来是这样的&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.1 200 OK
Date: Wed, 08 Feb 2006 08:20:07 GMT
Server: Apache/2.0.54 (Debian GNU/Linux) mod_auth_pgsql/2.0.2b1 mod_ssl/2.0.54 OpenSSL/0.9.7e
X-Powered-By: PHP/4.4.0
Transfer-Encoding: chunked
Content-Type: text/html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很简单是不是? 我们来继续探讨这跟你编程有什么关系. 如果你不明白我们讲到的所有事情也没有关系. 重要的是对浏览器和服务器如何交互的有个大致印象, 以及意识到并没有什么魔法在里面. 最终就是这些&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;浏览器和服务器通过使用头信息来进行交互&lt;/li&gt;
&lt;li&gt;头信息在主要内容之前发送, 并且用两个 &lt;a href=&quot;http://www.google.com/search?q=define%3ACRLF&quot;&gt;CRLF&lt;/a&gt;/换行符 来和主要内容分割开&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在头信息部分, 每一行就是一个头. 首先是头的名字, 然后是一个冒号一个空格, 然后是这个头的名/值&lt;/p&gt;

&lt;p&gt;头名: 头值&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;头信息可以包括许多类型的信息和指示, 以便浏览器和服务器用来告知对方接下来该做什么&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;: 如果你是那种刨根问底的人, 你可以看看 &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616.html&quot;&gt;RFC 2616&lt;/a&gt;, 那是 HTTP/1.1 的完整规范. 尤其是 &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14&quot;&gt;14 章&lt;/a&gt;, 包含每一个头的完整定义&lt;/p&gt;

&lt;h1 id=&quot;php-header-基础&quot;&gt;PHP header(): 基础&lt;/h1&gt;

&lt;p&gt;注意在我们最终得到的主页中的 X-Powered-By: PHP/4.4.0 和 Content-Type: text/html 这两个头信息. PHP 一开始就被设计成输出 HTML ( PHP 中的 H 即代表 &amp;#39;Hypertext&amp;#39;), 并且在 PHP 脚本第一次生成输出(比如, 使用 echo)时, 会自动为你包含这些头信息. 这非常方便, 但也造成许多 PHP 新手对头信息的困惑 - 在像 Perl 这样不是一开始就被设计成用于 web 开发的语言中, 不包含你自己的头而直接发送输出会产生 &amp;#39;500 Internal Server Error&amp;#39; 错误, 所以 Perl 的 web 开发者不得不立即学习关于头信息的知识&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.php.net/manual/function.header.php&quot;&gt;&lt;code&gt;header()&lt;/code&gt;&lt;/a&gt; 函数发送 HTTP 响应头信息, 而且只做这件事&lt;/p&gt;

&lt;p&gt;使用这个函数, 你可以让你的脚本发送你选择的头信息给浏览器, 创造一个非常有用的动态结果. 但是, 你需要知道关于 &lt;code&gt;header()&lt;/code&gt; 函数的第一件事就是你必须在 PHP 发送任何输出(这会使 PHP 自动发送默认的头信息)&lt;strong&gt;之前&lt;/strong&gt;使用它&lt;/p&gt;

&lt;p&gt;我怀疑有哪个 PHP 程序员没有见到过如下的错误消息&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Warning: Cannot modify header information - headers already sent by.....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如我们所说的, 响应头信息用一个空白行和主要内容分割. 这意味你仅可以发送头信息一次, 如果你的脚本有任何输出 (即使一个在 &lt;code&gt;&amp;lt;?php&lt;/code&gt; 标签之前的空白行或空格), PHP 就会自动发送头信息. 例如, 看一下下面这个脚本, 看起来逻辑上很正常:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;Welcome to my website!&amp;lt;br /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;You&amp;#39;re in!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Location: http://www.mysite.com/someotherpage.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个脚本判断 &lt;code&gt;$test&lt;/code&gt; 是否为 true, 如果不是则使用 &lt;code&gt;Location&lt;/code&gt; 头重定向访问者. 看到问题所在了吗? &amp;#39;Welcome...&amp;#39; 文字始终会发送出去, 所以默认的头信息会自动被发送. 在调用 &lt;code&gt;header()&lt;/code&gt; 时已经太晚了: 用户只看到一条错误消息 (如果你把错误报告关掉了, 则只会看到 &amp;#39;Welcome...&amp;#39; 文字), 而不是被重定向&lt;/p&gt;

&lt;p&gt;基本上有两种解决方法. 第一个就是重写代码&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Welcome to my website&amp;lt;br /&amp;gt;You&amp;#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  else{&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    header(&amp;#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mysite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someotherpage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二个就是使用&lt;a href=&quot;http://www.php.net/outcontrol&quot;&gt;输出缓冲&lt;/a&gt;, 这个解决方法更为优雅易用. 在我们上面的例子中, 重写代码并不困难, 但是试想一下如果有很多 HTML 需要移动位置 - 这样做就会很麻烦, 也会让我们的代码更难追踪. 虽然我们第一个示例导致了错误, 但是逻辑上是没错的. 输出缓冲可以让你一直保留(&amp;#39;缓冲&amp;#39;)输出(即使是 PHP 代码之外的 HTML)直到你明确指示了把输出发送给浏览器. 这样你就可以随意编写你的代码, 知道你指定了你需要指定的头信息, 然后明确指示发送这些输出. 两个相关的函数是 &lt;a href=&quot;http://www.php.net/manual/function.ob-start.php&quot;&gt;&lt;code&gt;ob_start()&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&quot;http://www.php.net/manual/function.ob-flush.php&quot;&gt;&lt;code&gt;ob_flush()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;ob_start()&lt;/code&gt;用于打开输出缓冲, &lt;code&gt;ob_flush()&lt;/code&gt; 会发送缓冲了的输出:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;ob_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//开始输出缓冲&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Welcome to my website!&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;You&amp;#39;re in!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Location: http://www.mysite.com/someotherpage.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;ob_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//输出缓冲中的数据&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我鼓励你读一下所有关于输出缓冲的函数, 非常有用. 你应当尽早的把输出缓冲发送出去, 尤其当你有许多东西想要发送的时候. 否则你的页面会看起来加载的很慢, 因为所有的内容只有被组装完毕后才发送, 而不是当可用的时候立即就被发送出去.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提示: 第二个参数&lt;/strong&gt; 如果你调用 header() 不止一次发送同一个头, 这个头的值将会是&lt;em&gt;最后&lt;/em&gt;调用的 header() 中设置的值. 如,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Some-Header: Value-1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Some-Header: Value-2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会产生 &lt;code&gt;Some-Header: Value-2&lt;/code&gt; 这个结果. 你可以通过设置第二个参数来发送同一个头两次. 这个参数默认是 true. 如果你设置其为 false, 那么第二个头值不会替换第一个, 而是两个都被发送. 所以下面的代码&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Some-Header: Value-1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Some-Header: Value-2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//不要替换第一个&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将会产生 &lt;code&gt;Some-Header: Value-1, Value-2&lt;/code&gt; 这个结果. 你很少会用到这个, 但是知道它也不错.&lt;/p&gt;

&lt;p&gt;知道了 HTTP header 和 PHP 如何配合之后, 让我们来看一些更为具体的例子.&lt;/p&gt;

&lt;h1 id=&quot;php-header-一些例子&quot;&gt;PHP header(): 一些例子&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;: 下面这个代码片断都是截取自完整的工作代码. 当你在自己的程序中包含他们的时候, 记得定义所有你自己的变量, 赋给他们默认值, 以及遵循其他最佳实践.&lt;/p&gt;

&lt;h2 id=&quot;使用-location-头重定向&quot;&gt;使用 &lt;code&gt;Location&lt;/code&gt; 头重定向&lt;/h2&gt;

&lt;p&gt;我们已经在上面看到过几次了: 它会重定向浏览器.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Location: http/www.mysite.com/new_location.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然你给它一个相对 URL 没准也能工作, 但是根据 HTTP 规范, 你真的应该使用一个绝对 URL.&lt;/p&gt;

&lt;p&gt;一个容易犯的错误就是在使用了 Location header 之后不立即使用 &lt;a href=&quot;http://www.php.net/manual/function.exit.php&quot;&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/a&gt; 以结束执行 (你可能不是总是想要结束执行, 但是大部分时间是的). 之所以这是一个错误是因为 PHP 代码会继续执行, 即使用户已经被重定向到新的 URL. 在最好的情况下, 这会不必要的使用系统资源. 在最坏的情况下, 你可能会执行一些让自己后悔的操作. 看一下下面的代码:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//重定向访问级别低于 4 的用户&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check_access_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Location: http://www.mysite.com/someotherpage.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//向高于访问级别 4 的用户发送秘密邮件&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mail_secret_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;The secret email is on its way!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;未授权用户的确被重定向了, 但是因为代码会继续执行, 他们同样会收到邮件. 为了避免这种情况, 针对已授权用户的代码可以写到 &lt;code&gt;else{}&lt;/code&gt; 声明中, 但是直接在 &lt;code&gt;header()&lt;/code&gt; 后面使用 &lt;code&gt;exit&lt;/code&gt; 来结束代码执行会更为干净容易一些.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//重定向访问级别低于 4 的用户&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check_access_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Location: http://www.mysite.com/someotherpage.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//停止代码执行&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//向高于访问级别 4 的用户发送秘密邮件&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mail_secret_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;The secret email is on its way!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;使用-refresh-头重定向&quot;&gt;使用 &lt;code&gt;Refresh&lt;/code&gt; 头重定向&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Refresh&lt;/code&gt; 和 &lt;code&gt;Location&lt;/code&gt; 一样可以重定向用户, 但是你可以延迟重定向. 例如, 下面的代码会在显示当前页面 10 秒钟后重定向用户到新的页面:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Refresh: 10; url=http://www.mysite.com/otherpage.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;You will be redirected in 10 seconds&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一个常见的用途就是通过重复的&amp;#39;重定向&amp;#39;一个页面到它自身来强制更新页面 (参见&lt;a href=&quot;#secondConv&quot;&gt;上面&lt;/a&gt;的第二个 &amp;#39;对话&amp;#39;). 例如, 这里是一个简单的例子, 页面会从 10 开始向下数, 每个数字之间有 3 秒间隔:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Refresh: 3; url=&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;PHP_SELF&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;?n=&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;BLAST OFF!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;: 如果刷新时间设置成 0, 则 &lt;code&gt;Refresh&lt;/code&gt; 头实际上和 &lt;code&gt;Location&lt;/code&gt; 头完全一样&lt;/p&gt;

&lt;h2 id=&quot;使用-content-type-头来提供不同类型的文件以及生成动态内容&quot;&gt;使用 &lt;code&gt;Content-Type&lt;/code&gt; 头来提供不同类型的文件以及生成动态内容&lt;/h2&gt;

&lt;p&gt;服务器用 &lt;code&gt;Content-Type&lt;/code&gt; 头告诉浏览器自己将要发送什么类型的数据. 使用这个头信息, 你可以让 PHP 脚本输出任何类型的文件, 从纯文本文件到图片文件到 zip 文件等等. 下面的表格列举了最常用的一个 &lt;a href=&quot;http://en.wikipedia.org/wiki/Mime_type&quot;&gt;MIME 类型&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;常用 MIME 类型:&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;text/html&lt;/td&gt;
&lt;td&gt;HTML (PHP 默认)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text/plain&lt;/td&gt;
&lt;td&gt;纯文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image/gif&lt;/td&gt;
&lt;td&gt;GIF 图片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image/jpeg&lt;/td&gt;
&lt;td&gt;JPEG 图片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image/png&lt;/td&gt;
&lt;td&gt;PNG 图片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;video/mpeg&lt;/td&gt;
&lt;td&gt;MPEG 视频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;audio/wav&lt;/td&gt;
&lt;td&gt;WAV 音频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;audio/mpeg&lt;/td&gt;
&lt;td&gt;MP3 音频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;video/mov&lt;/td&gt;
&lt;td&gt;mov 视频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;video/quicktime&lt;/td&gt;
&lt;td&gt;Quicktime 视频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;video/x-ms-wmv&lt;/td&gt;
&lt;td&gt;Windows WMV 视频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;audio/x-ms-wma&lt;/td&gt;
&lt;td&gt;Windows WMA 音频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;audio/x-realaudio&lt;/td&gt;
&lt;td&gt;RealPlayer 音频/视频 (.rm)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;audio/x-pn-realaudio&lt;/td&gt;
&lt;td&gt;RealPlayer 音频/视频 (.ram)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;video/x-msvideo&lt;/td&gt;
&lt;td&gt;ms 视频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;video/avi&lt;/td&gt;
&lt;td&gt;AVI 视频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application/pdf&lt;/td&gt;
&lt;td&gt;PDF 文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application/msword&lt;/td&gt;
&lt;td&gt;MS Word .doc 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application/zip&lt;/td&gt;
&lt;td&gt;Zip 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application/octet-stream&lt;/td&gt;
&lt;td&gt;其他. 数据. 用于强制下载或使用应用打开.*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x-foo/x-bar&lt;/td&gt;
&lt;td&gt;其他. 数据. 用于强制下载或使用应用打开.*&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;你可以用此来做一些有趣的事情. 比如, 你可能想要向用户发用一个预先格式化过的文本文件, 而不是 HTML:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type: text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$plain_text_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另或者你想要提示用户下载文件, 而不是在浏览器中查看它. 使用 &lt;code&gt;Content-Disposition&lt;/code&gt; 头, 这很容易, 你甚至可以推荐一个文件名给用户:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type: application/octet-stream&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Disposition: attachment; &amp;#39;&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;filename=&amp;quot;plain_text_file.txt&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$plain_text_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另或者你需要提供文件文件, 但是又希望隐藏文件的真实路径和名字, 并且只让已登录的用户下载:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b_is_logged_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type: application/octet-stream&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Disposition: attachment; &amp;#39;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;filename=&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$different_filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;readfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/files/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;You are not authorized to view this file&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;又或者你已经使用 PHP 的&lt;a href=&quot;http://www.php.net/manual/ref.image.php&quot;&gt;图片函数&lt;/a&gt;动态生成了一个图片, 想要展示给用户. 你可以创建一个 &lt;code&gt;build_image.php&lt;/code&gt; 文件, 像这样&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//生成图片, 然后&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type: image/jpeg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;imagejpeg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$image_resouce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;: 当心 &lt;a href=&quot;http://www.php.net/magic_quotes&quot;&gt;&lt;code&gt;magic_quotes&lt;/code&gt;&lt;/a&gt;! PHP 会自动使用反斜杠转移特殊字符, 这一开始看起来是个好主意, 但是大多数好的程序员认为 (a) 这会鼓励不去验证输入的粗心代码, 并且 (b) 在良好的代码中会产生本不该有 (如果 &lt;code&gt;magic_quote&lt;/code&gt; 关闭) 的麻烦. 其中一个麻烦就是二进制数据被破坏. 在上面这个例子中, 如果 &lt;a href=&quot;http://www.php.net/manual/en/ref.info.php#ini.magic-quotes-runtime&quot;&gt;&lt;code&gt;magic_quotes_runtime&lt;/code&gt;&lt;/a&gt;被启用, 则 &lt;code&gt;readfile()&lt;/code&gt; 输出的数据可能被添加反斜杠, 导致发送给用户的文件被破坏. 完美情况下, 你应该在 &lt;code&gt;php.ini&lt;/code&gt; 文件中关闭 &lt;code&gt;magic_quotes_runtime&lt;/code&gt; 选项, 但是如果你没有权限访问这个配置文件, 你可以使用 &lt;a href=&quot;http://www.php.net/manual/en/function.set-magic-quotes-runtime.php&quot;&gt;&lt;code&gt;set_magic_quotes_runtime()&lt;/code&gt;&lt;/a&gt; 函数 (给它传个数字 0) 关闭它.&lt;/p&gt;

&lt;p&gt;令人高兴的是, 最近的一次 PHP &lt;a href=&quot;http://www.php.net/%7Ederick/meeting-notes.html#magic-quotes&quot;&gt;开发者会议&lt;/a&gt;显示, 在未来版本(6+) 的 PHP 中 &lt;code&gt;magic quotes&lt;/code&gt; 会被弃用. 但是在所有人升级到这个版本的 PHP 之前, 记住这个导致的问题会节省你很多麻烦和疑问.&lt;/p&gt;

&lt;p&gt;你可以在 URL 中传递生成图片所需的参数, 然后使用 $_GET 获取它们. 然后在另一个页面, 你可以使用 img 标签来包含这个图片:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;img src=&amp;quot;build_image.php&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;?&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$user_id&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;amp;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$caption&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可用的地方几乎讲不完. 你 PHP 变成越多, 越会发现 &lt;code&gt;Content-Type&lt;/code&gt; 头真的是你的好朋友&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;: 浏览器处理各式 &lt;code&gt;MIME类型&lt;/code&gt; 的&lt;em&gt;预期&lt;/em&gt;方式以及&lt;em&gt;实际&lt;/em&gt;方式可能并不一致 (尤其是 Internet Explorer), 所以你最好是在你需要支持的浏览器中测试一下. PHP 参考中的&lt;a href=&quot;http://www.php.net/manual/function.header.php#usernotes&quot;&gt;用户评论&lt;/a&gt;有许多关于此的技巧.&lt;/p&gt;

&lt;h2 id=&quot;防止页面缓存&quot;&gt;防止页面缓存&lt;/h2&gt;

&lt;p&gt;PHP 页面通常会生成非常动态的内容, 为了防止用户因为页面缓存而错过了更新过的页面, 告诉浏览器不要缓存特定的页面通常非常有用. 下面的代码在可能会访问你网站的浏览器中工作的很好:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Cache-Control: no-cache, no-store, must-revalidate&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//HTTP/1.1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Expires: Sun, 01 Jul 2005 00:00:00 GMT&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Pragma: no-cache&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//HTTP/1.0&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Expires&lt;/code&gt; 头可以是任何已经过去的日期. 对于 &lt;code&gt;MIME 类型&lt;/code&gt;, 浏览器 (尤其是较老的) 可能不会总是正确的理解你的缓存指示 (虽然大部分现代浏览器会).&lt;/p&gt;

&lt;h2 id=&quot;其他应用&quot;&gt;其他应用&lt;/h2&gt;

&lt;p&gt;还有另外一个可以使用头信息的地方, 比如设置 &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;HTTP 响应码&lt;/a&gt;, 或者执行 &lt;a href=&quot;http://www.php.net/manual/features.http-auth.php&quot;&gt;HTTP 认证&lt;/a&gt; (如果你作为 &lt;code&gt;Apache&lt;/code&gt; 模块来使用 PHP 的话). 现在, 你了解了 header() 如何工作及怎么使用它, 你可以用它做你之前想都没想到的许多事情了.&lt;/p&gt;

&lt;h1 id=&quot;php-中的请求头信息&quot;&gt;PHP 中的请求头信息&lt;/h1&gt;

&lt;p&gt;我们讲了怎么使用响应头信息了. 我们还可以从浏览器发给服务器的请求头信息中获取很多信息. 有两种方法来获取. 第一, 许多 [&lt;code&gt;$_SERVER&lt;/code&gt;数组][server]中的值都是由传来的请求头信息决定的. 第二, 如果 PHP 是作为 &lt;code&gt;Apache&lt;/code&gt; 模块使用的, &lt;a href=&quot;http://www.php.net/manual/function.apache-request-headers.php&quot;&gt;&lt;code&gt;apache_request_headers()&lt;/code&gt;&lt;/a&gt; 会返回一个包含所有请求头信息的数组 (甚至那些不在 &lt;code&gt;$_SERVER&lt;/code&gt; 中的).&lt;/p&gt;

&lt;h2 id=&quot;安全第一-不要信任请求头信息&quot;&gt;安全第一: 不要信任请求头信息&lt;/h2&gt;

&lt;p&gt;因为请求头信息发自浏览器, 浏览器又可以在客户端被控制, 所以你&lt;strong&gt;永远不要信任来自请求头, 又和你站点安全紧密相关的头信息&lt;/strong&gt;. 一个很好的例子就是 &lt;code&gt;$_SERVER[&amp;#39;HTTP_REFERER&amp;#39;]&lt;/code&gt;变量, 这个变量应该包含一个用户转自的源 URL. 一个新手的常见错误就是认为他们可以使用这个来确保用户只会通过特定路径来访问页面, 因此他们便无需关心服务器端的数据验证. 例如, 看看下面的代码, 它试着去确保数据是从一个特定的页面发送过来的, 而不是从另一个站点&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP_REFERER&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://www.mysite.com/myform.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Refresh: 5; url=http://www.mysite.com/myform.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;You must use the form on my site...redirecting now.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;insert_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;var1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;var2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这或许会阻止那些不是很精通的黑客通过他的浏览器提交一个自定义的表单来提交数据, 但是任何一个稍微高深一些的黑客都可以通过使用 &lt;code&gt;telnet&lt;/code&gt; 来提交数据, 包括请求头信息&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Referer: http://www.mysite.com/myform.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后轻易的躲过这层保护机制. 这里所要讲的重点是: 使用 HTTP 请求头信息来统计一些数据以便提供更好的用户体验 - 大部分的请求头信息都是发自真实的浏览器而且可以被信任...但是&lt;strong&gt;不要&lt;/strong&gt;在有关安全的问题上依赖任何请求 header&lt;/p&gt;

&lt;h2 id=&quot;使用-http-请求头信息&quot;&gt;使用 HTTP 请求头信息&lt;/h2&gt;

&lt;p&gt;你可以用它做几件事. 使用 &lt;code&gt;$_SERVER[&amp;#39;HTTP_USER_AGENT&amp;#39;]&lt;/code&gt;你可以探测用户生成他使用的什么浏览器. 你可以检查 &lt;code&gt;$_SERVER[&amp;#39;HTTP_ACCEPT_LANGUAGE&amp;#39;]&lt;/code&gt; (可能要配合 &lt;code&gt;$_SERVER[&amp;#39;HTTP_ACCEPT_CHARSET&amp;#39;]&lt;/code&gt; 和一些 &lt;a href=&quot;http://www.expertsrt.com/articles/Rod/city_country_IP.php&quot;&gt;IP 地理位置&lt;/a&gt; ) 来决定向用户展示什么语言. 虽然 &lt;code&gt;$_SERVER[&amp;#39;HTTP_REFERER&amp;#39;]&lt;/code&gt; 对于安全目的并不能被依赖, 但是可以用来统计你网站的流量, 或者根据用户的访问路径来定制显示内容. 如果因为某些原因你想要操作原始的请求字符串, 你可以使用 &lt;code&gt;$_SERVER[&amp;#39;QUERY_STRING&amp;#39;]&lt;/code&gt;. 查看 &lt;code&gt;$_SERVER[&amp;#39;REQUEST_METHOD&amp;#39;]&lt;/code&gt; 可以知道你的页面是通过 &lt;code&gt;GET&lt;/code&gt; 还是 &lt;code&gt;POST&lt;/code&gt; 方法访问的. 还有很多可以帮助你做许多有创意的事情的信息等着你去发现.&lt;/p&gt;

&lt;h1 id=&quot;html-meta-标签中的-http-头信息-equivalents-对应物&quot;&gt;HTML &lt;code&gt;meta&lt;/code&gt; 标签中的 HTTP 头信息 equivalents(对应物)&lt;/h1&gt;

&lt;p&gt;很有可能在阅读本文之前, 你已经用过下面的 HTML meta 标签重定向用户了:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;refresh&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0;http://www.mysite.com/somepage.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看起来很熟悉? &amp;#39;http-equiv&amp;#39; &lt;code&gt;meta&lt;/code&gt; 标签即 HTTP 响应头的&amp;#39;对应物&amp;#39;, 引入它们是为了让没有服务器端编程能力的人在写 HTML 页面的时候也能使用强大的头信息功能. 使用这些 meta 标签很简单: 它们可以被放在文档 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 中的任何地方, &lt;code&gt;http-equiv&lt;/code&gt; 属性包含头名, &lt;code&gt;content&lt;/code&gt; 属性包含头值.&lt;/p&gt;

&lt;p&gt;我发现这些 meta 标签最开始也会和 HTTP 头一样让人困惑, 但是现在它们在你看来应该很简单了. 虽然我更喜欢使用 PHP 的 &lt;code&gt;header()&lt;/code&gt; 函数, 但是 &lt;code&gt;meta&lt;/code&gt; 标签的 HTTP equivalents 对于像指定字符集这样的事情会更顺手一些. 比如, 我经常在 HTML 页面中使用 (有时候 PHP 页面中也会用到):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;: 使用 &lt;code&gt;meta&lt;/code&gt; 标签来指定头信息并不被一致的支持, 所以通常来讲使用头信息本身会更加安全和快速. 另外很明显, 还有一些头的名值对并不能用 &lt;code&gt;meta equivalents&lt;/code&gt; 来指定: 在真正的头信息被发送, 浏览器已经把文档读取为 HTML 之后, 你是不能再去设置 &lt;code&gt;Content-Type&lt;/code&gt; 成 &lt;code&gt;image/png&lt;/code&gt; 的 ;-)&lt;/p&gt;

&lt;h1 id=&quot;结语&quot;&gt;结语&lt;/h1&gt;

&lt;p&gt;现在我们讲完了, 你应该对 HTTP 的工作原理以及如何使用响应请求头信息以及如何把它们应用到自己的代码中有了很好的认识. 这些知识也会让你在 web 应用的效率和安全方面有更审慎的思考. 我希望在你继续编程的时候, 会发现你使用 HTTP 头信息更加顺手了, 也能通过使用它们让你的工作更加轻松, 你的页面更好了.&lt;/p&gt;

&lt;p&gt;还有额外一点, 记住头信息就像是词语: 它们交流信息并请求某些操作被执行, 但是本身并不强制任何事情. 99.9% 的情况下, 浏览器和服务器和谐合作, 事情发展很顺利. 但记住在现实中, 是不是你会遇到一些混蛋 (黑客), 或者一些只想按照自己意愿做事的东西 (Internet Explorer). web 开发从很多角度讲是一个客服性质的工作, 所以你应该尽全力避免这些东西, 满足客户的 &amp;#39;特殊需要&amp;#39; :-)&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Sat, 26 Sep 2015 00:00:00 +0800</pubDate>
        <link>https://unifreak.github.io//translation/http-headers-and-php-header-function</link>
        <guid isPermaLink="true">https://unifreak.github.io//translation/http-headers-and-php-header-function</guid>
        
        <category>php</category>
        
        <category>http</category>
        
        
        <category>translation</category>
        
      </item>
    
  </channel>
</rss>